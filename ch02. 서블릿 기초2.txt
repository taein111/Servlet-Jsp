ch02. 서블릿 기초

-URL Mapping이란 서블릿을 동작시키기 위해서 실제 자바 클래스 명을 사용하는 대신 서블릿을 요청하기 위한 문자열을 말한다.

- 서블릿을 요청하기 위한 url mapping을 실제 자바 클래스 명과 다른 이름으로 지정할 수 있다.

-서블릿을 요청하기 위한 URL
=>http://localhost:8181/web-study-02/hello

: 서블릿을 요청하기 위한 URL에서 http://localhost은 웹 서버에 접속하기 위한 ip 주소이고
 8181 톰캣을 설치하면서 지정한 포트 번호이다.
그렇기 때문에 http://localhost:8181은 톰캣 서버에 접속하겠다는 의미.


*컨텍스트 패스 
: 웹서버에서 제공하는 다양한 웹 애플리케이션을 구분하기 위해서 사용하는 것.
병원관리를 위한 웹 애플리케이션을 위한병원관리 프로젝트를 hospital이란 이름으로 이클립스에서 생성하면 hospital이란
컨텍스트 패스가 추가되고 외부에서 이 애플리케이션을 접근할 때 다음과 같은 url을 입력한다.
http://localhost:8181/hospital
				=>병원 관리 애플리케이션에 접근하기 위한 컨텍스트 패스

-------------------------------------------------------------------------------------------------------------------------
*서블릿 클래스의 구조
@WebServlet("/hello") .................①
public class HelloServlet extends HttpServlet { ..................②
protected void doGet(HttpServletRequest request, 
HttpServletResponse response) 
throws ServletException, IOException { ..................③
response.setContentType("text/html"); ..................④
PrintWriter out=response.getWriter(); .................⑤
out.print("<html><body><h1>"); ..................⑥
out.print("Hello Servlet"); 
out.print("</h1></body></html>"); 
out.close(); ..................⑦
}
}

1. @webServlet 어노테이션으로 Url mapping
-URL 매핑을 보다 쉽게 자바 클래스에서 설정할 수 있도록 제공되는 어노테이션
서블릿 3.0 이전에는 web.xml에서 매핑을 했기 때문에 다소 불편함이 있었다.

=>url mapping이란 서블릿을 동작시키기 위해 실제 자바 클래스 명(helloservlet)을 사용하는 대신 
서블릿을 요청하기 위한 문자열(hello)을 서블릿 클래스와 매핑시키는 것. 
=> url 매핑을 하는 이유 : 실제 서블릿 클래스를 공개하지 않기 위해서.
=> 실제 호출되는 서블릿 클래스는 HelloServlet이지만 외부에서 이 서블릿을 요청할 때에는 
서블릿 클래스 이름이 아닌 서블릿 클래스와 맵핑된 URL인 hello로 접근.

=>즉, 서블릿 클래스를 요청하기 위해서 브라우저의 주소 입력란에 서블릿 클래스 이름 대신 URL 매핑으로 지정한 이름을 입력하여 호출하기 위한 설정입니다. 이 이름은 서블릿 클래스를 생성하는 단계에서 직접 지정한 이름.

1.개발자는 자신이 만든 서블릿 클래스가 어느 경로에 무슨 이름으로 만들어졌는지 알아야 하지만 
클라이언트는 어느 디렉터리에 어느 파일명으로 존재하는지는 관심 없고 URL 이름을 입력하여
 원하는 서비스만 받을 수 있으면 된다.
2.만일 사용자가 서블릿의 실제 경로와 파일 이름을 직접 입력해야 한다면 디렉터리 구조가 바꾸었을 때
 사용자에게 일일이 변경된 위치를 통보해 주어야 한다.
3.매핑을 통해 사용자가 접근하는 URL 이름은 실제 물리적인 위치 정보가 아니기에 이런 문제를 유연하게 대처할 수 있게 된다.

=>요청은 URL pattern으로 하고 (http://localhost:8181/web-study-02/hello)
이 패턴을 @WebServlet 어노테이션 코드의 URL Mapping에서 찾아서 일치하면
 이 URL Mapping 바로 아래 선언된 서블릿 클래스가 요청

=>@WebServlet("/hello")
public class HelloServlet extends HttpServlet { 
} 



--<<서블릿 클래스 정의하기>>

public class HelloServlet extends HttpServlet { 
 
} 

=> 접근 제한자는 반드시 public
=> HttpServlet의 상속을 받아야함


*요청 메서드
요청 방식에 따라 doGet() 혹은 doPost()가 호출되기 때문에 요청 방식에 맞추어서 
HttpServlet 클래스의 doGet() 혹은 doPost()를 오버라이딩해야한다.
 이 메소드는 요청이 되면 호출되기 때문에 요청 메소드라고 불리기도 한다.

작성할 서블릿은 브라우저의 주소란에 직접 서블릿 이름을 입력하여 수행시킬 것이기 때문에 
HttpServlet의 doGet()을 오버라이딩(③)하여 처리를 위한 코드를 입력.


doGet()은 두 개의 전달 인자(HttpServletRequest, HttpServletResponse)를 갖는다.
HttpServletRequest는 클라이언트의 요청(request)을 처리하고, 
HttpServletResponse는 요청 처리 결과를 클라이언트에게 되돌리기(응답하기, response) 위해 사용된다..
 doGet()은 반드시 예외처리(IOException, ServletException)를 해주어야 하는데, 
일반적으로 throws 절을 이용해서 doGet 메소드를 호출한 웹 서버에게 예외처리를 넘긴다.



*응답 객체에 컨텐츠 타입 지정하기setContentType() 

- HttpServletResponse 객체인 response로 setContentType() 메소드(④)를 호출하여 클라이언트에게 
응답할 페이지에 대한 환경 설정을 결정해 주어야 한다. 
응답 방식이 “text/html”로 지정되어 있으므로 text나 html로 보여주겠다는 의미이다. 
response.setContentType("text/html; charset=UTF-8");


*출력 스트림 얻어오기.

출력 스트림인 PrintWriter 객체를 HttpServletResponse 객체의 getWriter() 메소드(⑦)로부터 얻어낸다.

PrintWriter out=response.getWriter();  <=PrintWriter 객체를 리턴하는 매서드
PrintWriter는 파일 입출력을 위해서 제공해주는 자바 클래스로서 java.io 패키지에 정의되어 있다.
그래서 이 클래스를 사용하려면 java.io.PrintWriter를 import하고 사용해야 한다.


*클라이언트에게 html문서 형태로 결과 출력하기
PrintWriter 객체인 out의 출력 메소드인 println()을 통해 결과를 사용자에게 출력할 수 있다.
 사용자에게 보내진 내용들은 브라우저를 통해 출력되기 때문에 결과를 HTML 태그(⑥) 형태로 만들어서 보내야 한다.

public class HelloServlet extends HttpServlet { //서블릿 클래스 접근제한자는 public이어야한다. httpServlet의 상속 받아야함
protected void doGet(HttpServletRequest request, HttpServletResponse response) 
                            throws ServletException, IOException { // 요청처리, 응답처리, 예외처리
response.setContentType("text/html"); //응답객체에 컨텐츠 타입 지정하기
PrintWriter out=response.getWriter(); //출력 스트림 얻어오기

out.print("<html><body><h1>");  //클라이언트한테 html문서 형태로 결과 출력하기
out.print("Hello Servlet");
out.print("</h1></body></html>");

out.close();
}
}



*서블릿의 동작 원리
 -> 서블릿의 수행은 서블릿 컨테이너에 의해 처리되는데, 서블릿이 요청 될 때마다 스레드가 생성되어 서블릿 객체를
생성해서 수행한다.


요청 : 클라이언트 -> 웹서버 -> 서블릿 컨테이너 -> 스레드 -> 서블릿 객체
응답 : 서블릿 객체 -> 스레드 -> 서블릿 컨테이너 -> 웹서버 -> 클라이언체


1. 브라우저에서 서블릿을 요청한다.
2. 웹서버가 서블릿 요청을 인식하여 서블릿 컨테이너에세 서블릿을 수행하도록 넘겨준다.
3. 서블릿은 스레드를 가동하여 해당 서블릿 객체를 생성하여 이를 수행한다.
4. 서블릿 객체의 작업이 종료되면 기동되었던 스레드가 종료된다.
5. 서블릿 수행결과가 웹서버에 전송된다.
6. 이를 클라이언트에 전송하게 된다.


* 서블릿의 라이프 사이클
-> 서블릿은 수행 속도가 빠르다. 두번째 이상 요청이 첫번째 요청경 우와 다르게  처리되기 때문이다.
다른 웹 기술들은 클라이언트의 요청이 있을때마다 작업을 처음부터 새롭게 제공하지만, 
서블릿은 첫번째 요청인 경우 서블릿 클래스를 찾아 메모리에 로딩하여 인스턴스(객체)를 생성,
이때 생성된 서블릿 인스턴스는 메모리에 계속 남아있게 되므로 이후 부터 서블릿이 호출되면
인스턴스를 생성하지 않고 메모리에 로딩된 서블릿으로부터 서비스만 받기때문에 수행속도가 빠르다.

1 . instance 생성 -> 2. init() 최초로 한번만 호출 -> 3. doGet() / doPost() 요청될때마다 호출 -> distory() 톰캣 해제시 자원해제


-----------------------------------------------------------------------------------------------------

--<form> 태그의 기본 형식

<form method = "get/post" action ="호출할 서블릿">

method
:어떤 방식으로 데이터를 넘겨 줄 것인지를 결정한다. 
get과 post 방식 중에서 하나를 선택한다.
post는 사용자가 입력한 내용을 발송할 때 그 내용을 공개하지 않는다.
get은 사용자가 입력한 결과를 알 수 있도록 내용을 공개한다.

action
: 전송(submit)버튼이 누르면 action 속성 다음에 기술한 URL에 지정된 파일로 이동한다. 

ex ) <form method="get" action="MethodServlet“>

*전송(submit) 버튼 만들기
:action 속성에 기술된 서블릿으로 데이터를 전송하기 위해서는 전송(submit) 버튼이 클릭되어야 한다
<input type="submit" value="전송" >

*취소(reset) 버튼 만들기
:입력한 내용을 취소하고자 할 때에는 취소(reset) 버튼 사용
<input type="reset" value="취소" >

type = checkbox
데이터값을 여러 개 전송해야 할 때 사용
<input type="checkbox" name="hobby" value="read">독서
<input type="checkbox" name="hobby" value="cook">요리
<input type="checkbox" name="hobby" value="run">조깅
<input type="checkbox" name="hobby" value="swim">수영
<input type="checkbox" name="hobby" value="sleep">취침

type = radio
checkbox와 달리 여러 개의 데이터 값 중 한 개의 값만을 전송할 때 사용
<input type="radio" name="major" value="kor">국어
<input type="radio" name="major" value="eng" checked="checked">영어
<input type="radio" name="major" value="mat" >수학
<input type="radio" name="major" value="des" >디자인

select
리스트형태의 데이터를 사용합니다.
<select name="protocol">
<option value="http">http</option>
<option value="ftp" selected="selected">ftp</option>
      <option value="smtp">smtp</option>
      <option value="pop">pop</option>
</select>


--------------------------------------------------------

--<쿼리 스트링>
: 사용자가 입력한 데이터가 서버로 보내져야 서버가 그 값으로 여러가지 로직을 구현할 수 있기 때문에 , 
서블릿 클래스에서 사용자가 입력한 값 얻어오기 위해 사용하는 것.
 -> get 방식으로 요청했을 때 url 주소 뒤에 입력 데이터를 함께 제공하는 방법.
 -> "리소스? 이름=값"

ParamServlet?id=taein&age=15
=> 사용자가 입력한 값(taein)을 서버에서 얻어오려면 이름(id)를 알아야 한다.

-웹 프로그래밍에서는 데이터가 쿼리 스트링 형태로 서버로 전송되고 이렇게 전송된 데이터를 얻어오기 위해서 
쿼리 스트링에서 언급한 이름을 알아야 데이터를 얻어올 수 있다.
-웹 프로그래밍을 하다 보면 쿼리 스트링 형태로 개발자가 직접 데이터를 넘겨주어야 할 경우가 있기 때문에
  쿼리 스트링을 사용한다.

-프로그램을 하다 보면 페이지 사이에 정보 교환이 필요한 경우가 있는데 
이를 위해서 웹 프로그래밍에서 제공하는 것이 쿼리 스트링dlek.

-쿼리 스트링 형태로 데이터가 전송되는 것은 <form> 태그에 전송방식을 get으로 하여 서버로 데이터를 보낼 때 
->서버로 데이터를 전송하기 위해서는 데이터를 입력할 수 있는 텍스트 박스가 필요하다.
-> 텍스트 박스는 <input> 태그에 type 속성 값을  "text"로 해야 만들 수 있다.
<input type="text" name="텍스트 박스 이름">
<input type="text" name="id">
<input type="text" name="age">
=>http://localhost:8181/web-study-02/ParamServlet?id=taein&age=15 
=>폼에서 입력 양식들을 작성할 때 태그의 name 속성 값이
 쿼리 스트링의 이름에 해당되고 입력한 값이 바로 쿼리 스트링의 값에 해당


- 폼에서 입력 양식들을 작성할 때 태그의 name 속성 값이 쿼리 스트링의 이름에 해당되고,
입력한 값이 쿼리 스트링 값에 해당된다.
= > 클라이언트와 서버 사이에 데이터가 전송되는 형태가 쿼리스트링 형태이다.

--------------------------------------------------------

*요청 객체(request)와 파라미터 관련 메서드(getParameter)
-request 객체의 getParameter() 메소드를 호출하여 <input> 태그를 통해 입력된 값을 얻어올 수 있다.
원하는 값을 얻기 위해서는 입력 양식의 name 속성 값을 getParameter()의 매개변수로 기술한다.

String id=req.getParameter("id");
<input type="text" name = "id">

=> 사용자가 입력한 아이디 값은 request 객체의 getParameter() 메서드 전달인자로 쿼리스트링의 이름에 해당되는
id를 기술한다.
=> getParameter() 결과값으로 값에 해당되는 "taein"을 얻어온다.
이렇게 얻어온 "taein"은 String 변수 id에 저장된다.
->getParameter()은 파라미터 값을 항상 문자열(String) 형태로만 얻어온다.
->아이디는 문자열 형태이기에 별 문제가 없지만, 나이는 일반적으로 int 형 변수에 저장
그렇기 때문에 일차적으로 getParameter()가 텍스트 박스에서 입력 받아온 문자열 형태의 값을 int 형으로 변환해야 한다.
=> int age=Integer.parseInt(request.getParameter("age"));
------------------------------------------------------------

*servlet 문서 작성하기
 -서블릿 특징
:1. 동적 웹 어플리에키션 컴포넌트
 2. 자바 확장자
 3. 클라이언트의 요청에 동적으로 작동하고, 응답은 html을 이용
 4. java thread 이용하여 동작
 5. mvc 패턴에서 controller로 이용된다.




