ch03. JSP

- 인터넷을 사용하는 사용자에게 정보를 제공하기 위해서 HTML 태그를 사용하여 
웹 브라우저 내에 정보를 표시하는데 JSP 에서는 이러한 HTML 태그를 사용하여 웹 브라우저 내에 정보를 표시하는데
JSP에서는 이러한 HTML 태그를 사용할 수 있어 웹 애플리케이션의 프레젠테이션 역할을 한다.

*컨텍스트 패스
컨텍스트 패스는 여러 개의 웹 애플리케이션이 WAS에서 동작할 경우 이를 구분하기 위해서 사용

http://localhost:8181/jsp-study/01_hello.jsp
	                ^->"컨텍스트패스"
기본적으로 컨텍스트 패스 이름은 프로젝트 이름과 동일하게 설정


-JSP는 JAVA SERVER PAGE 의 약자. HTML 태그에 자바로 프로그래밍하여 브라우저에 보여주는 페이지
아래와 같이 HTML 태그 사이에 <% %>를 추가하려면 이는 JSP 파일로 작성해야한다.
반면 JSP 파일은 HTML 파일과 다르게 동작한다. HTML 파일은 확장자가 HTML이고 
이는 웹브라우저 내의 번역기가 돌리는 반면,
JSP 파일은 톰캣 서버가 번역하여 그 결과를 HTML 태그로 변환한 후 웹 브라우저에 내려 보낸다.

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<html>
<body>
<%             <-- html 태그 사이에 <% %>를 추가
   int num1 = 20;
   int num2 = 10;
   int add = num1 + num2;
   out.print( num1+"+"+num2+"="+add);
%>
</body>
</html>


=> 클라이언트가 브라우저의 주소 입력 란에 요청할 jsp 페이지 이름을 입력하면 웹서버에게 jsp 페이지를 요청하는 것.
웹 서버는 jsp 페이지를 찾아서 클라이언트에게 전송


----------------------------------------------------------------------------
*JSP의 처리 과정
-자바 기반으로 웹 애플리케이션을 작성하기 위한 도구로 서블릿이 먼저 만들어짐
 -> 서블릿은 HTML코드가 자바 코드 안에 들어가는 구조
 -> 디자이너가 자발르 이해하지 모한 채 HTML 코드를 자바형태인 서블릿에서 작성한다? 불가능
 -> 이러한 문제점때문에 JSP 등장

JSP 는 HTML 문서에 자바코드가 들어가는구조이기 때문에 서블릿보다 JSP로 개발하는 편이 쉽고 간단하다.

JSP는 서블릿보다 간편하게 웹 애플리케이션을 개발하기 위해서 등장한 것이기 때문에 
웹 컨테이너는 JSP를 있는 그대로 받아들이지 못하고 이를 서블릿으로 변환한 후에 동작  


1. 브라우저에서 JSP 페이지를 웹서버에게 요청한다.
2. 웹 서버는 JSP에 대한 요청을 웹 컨테이너에게 넘긴다. 
3. 웹 컨테이너는 해당 JSP를 찾아서 서블릿파일을 생성
4. 서블릿 파일은 컴파일되어 서블릿 클래스 파일을 생성한다.
5. 컴파일된 서블릿 클래스 파일을 웹 서버로 보낸다.
6. 사용자는 서블릿의 출력 결과인 HTML 형태로 응답 결과를 보게된다.

① 사용자가 브라우저 주소 창에 http://localhost:8181/jsp-study/myCount.jsp를 입력하여 요청
 웹 서버는 JSP 페이지(myCount.jsp) 형태의 요청에 대해서 웹 컨테이너로 하여금 처리하도록 파일을 넘긴다.
② JSP 페이지(myCount.jsp)가 처음으로 요청된 것이면 JSP 파일을 변환하여
 서블릿 자바 파일(myCount_jsp.java)을 생성
③ 서블릿 파일은 실행 가능한 상태인 클래스 파일(myCount_jsp.class)로 컴파일 
④ 클래스 파일(myCount.jsp.class)이 메모리에 적재되어 실행
⑤ 실행 결과가 웹 서버에 넘겨지면 웹 서버는 HTML 형태로 사용자에게 응답
사용자는 브라우저에 넘겨진 페이지를 출력하여 결과를 볼 수 있게 된다.
두 번째 이후로 동일한 JSP 페이지(myCount.jsp)가 요청되면 ②, ③, ④ 과정은 거치지 않고 
메모리에 로드된 클래스 파일이 응답 처리된다.
그렇기 때문에 서블릿와 JSP는 응답하는데 걸리는 시간 차이가 그리 크지 않다.

--
웹 페이지의 요청은 get 방식과 post 방식이 있고 서블릿은 요청에 따라 doGet() 혹은 doPost() 메소드가 각각 호출 
요청에 대한 처리는 이 두 메소드(doGet 혹은 doPost) 외에 service()로 할 수 있다.
service()는 get 방식과 post 방식 구분 없이 모든 요청에 대한 처리를 하는 메소드
웹 컨테이너가 JSP를 변환하여 만든 서블릿 클래스에는 요청에 대한 처리를
 doGet 혹은 doPost가 아닌 _jspService()가 맡아서 처리하도록 정의해 놓는다.
웹 컨테이너가 JSP를 서블릿으로 변환하는 과정 중, 서비스 메소드 선언 다음에 내장 객체를 선언하고
 값을 할당하는 부분이 있다. 이 때문에 서블릿에서 사용했던 out과 같은 내장 객체를 JSP에서 사용할 수 있는 것입니다. 

----------------------------------------------------------------------------
--<JSP 기본 태그>
HTML이나 자바스크립트에 의해 작성된 페이지들은 그 페이지를 사용하는 사용자와 상관없이 항상 동일한 내용만
제공해주는 정적 페이지이다.
그러나 서로 다른 내용이 제공되어야 할때는 동적 페이지를 구현해야한다
 => JSP 태그를 사용해야한다.

*스크립트릿 - 자바코드를 기술한다 - <% %>
*선언 - 변수와 메서드를 선언한다 - <%! %>
*표현식 - 계산식이나 함수를 호출한 결과를 문자열 형태로 출력한다. <%= %>
*주석 - JSP페이지에 설명을 넣는다 <%-- --%>
*지시자 - JSP 페이지의 속성을 지정한다 <%@ %>

*JSP 스크립트 요소
-서버가 인식하는 JSP 태그 중 스크립트릿(scriptlet), 선언문(declaration), 표현식(expression) 3가지
----------------------------------------------------------------------------
**스크립트릿
JSP 문서는 HTML 태그와 자바 코드가 섞여 있다.
JSP 문서는 HTML 태그로 정적 페이지를 디자인하고 웹 서버에서 처리할 문장들을 
자바 언어로 부분적으로 기술하는데 이때 사용하는 자바 언어를 서버 스크립트 언어라고 한다.
서버 스크립트 언어인 자바를 JSP 문서 내부에 기술하려면 JSP가 제공해주는 스크립트릿 태그를 사용해야 한다.

<% 
   웹 서버에서 실행되는 자바 코드를 기술. 
%>

예시)
<%
int num1 = 20;
int num2 = 10;
int add = num1 + num2;
out.print( num1 + " + " + num2 + " =" + add);
%>

=> 두 정수와 계산된 결과를 화면에 출력하는 코드를 추가하기 위해서는 JSP의 내장 객체인 out을 사용해야한다.
out은 출력을 담당하는 jsp 내부객체로 출력하기위한 print()메서드를 사용해야한다.
=> <% %> 안에 기술한 코드들은 서블릿의 _jspService()메소드 내부에 기술되는 내용이다.
따라서 <% %>안에 static 변수나 메소드를 선언할 수 없다.

----------------------------------------------------------------------------


**선언문
-JSP 페이지에서 사용되는 변수나 메소드를 정의하기 위해서 선언문(Declaration)을 사용

변수선언
<%! 
   String str="안녕하세요!"; 
   int a=5, b=-5;   
%> 

메소드 선언
<%! 
public int abs(int n){
   if(n < 0){
     n=-n;
   }
   return n;
}
%> 

*선언문에서 정의한 변수와 메소드 사용
<%
  out.print(str+"<br>");
  out.print(a+"의 절대값 : "+ abs(a)+"<br>");
  out.print(b+"의 절대값 : "+ abs(b)+"<br>"); 
%>

=>선언문안에 선언한 변수는 JSP 문서 전체에서 사용 가능한 전역변수

----------------------------------------------------------------------------


**표현식
-JSP에서 브라우저로 출력을 하기 위해서 사용하는 또 다른 방법은 표현식
-표현식(expression)은 변수의 값이나 계산식 혹은 함수를 호출한 결과를 문자열 형태로 웹 문서에 출력할 때
사용되는 태그이며 <%=로 시작하여 %>로 끝낸다.

<%= 변수 %>
<%= 수식 %>
<%= 메소드 호출 %>

<%= str %><br>
<%= a %>의 절대값:<%= abs(a) %><br>
<%= b %>의 절대값:<%= abs(b) %><br>

      out.print( str );
      out.write("<br>\r\n");
      out.print( a );
      out.write(" 절대값: ");
      out.print( abs(a) );
      out.write("<br>\r\n");
      out.print( b );
      out.write(" 절대값: ");
      out.print( abs(b) );
      out.write("<br>\r\n");



=>웹 컨테이너는 <%=와 %>를 만나면 out.print()로 변환
=> 표현식에 기술한 내용은 out.print()의 매개변수가 된다. 때문에 표현식 사용할때 세미콜론을 기술하면 안된다.

----------------------------------------------------------------------------

**지시자
형식 : <%@ 지시자 속성=“값” . . . %>

page : 해당 JSP 페이지 전반적으로 환경을 설정할 내용을 지정한다.
include : 현재 페이지에 다른 파일의 내용을 삽입할 때 사용한다.
taglib : 태그 라이브러리에서 태그를 꺼내와 사용할 수 있는 기능을 제공한다.

 import 자바의 import 구문과 동일
<%@page import=“java.util.Calendar” %>

session  세션을 사용할지 말지를 결정
<%@ page session=“false” %>

isThreadSafe
<%@ page isThreadSafe =“true” %>
각 페이지의 스레드들이 안전하게 동작할 수 있다(동기화)

info
<%@ page info =“JSP 페이지에 대한 정보” %>
JSP페이지에 대한 간략한 설명을 기록하는 용도. 
현재페이지에 대한 정보를 알려주는 역할
(실행에 영향을 미치지 않음)

errorPage
<%@ page errorPage =“error.jsp” %>
JSP페이지에서 에러 발생시 보여줄 에러 페이지 설정

isErrorPage
<%@ page isErrorPage =“true” %>
현재의 페이지가 에러페이지인지 아닌지를 설정
에러페이지의 경우 exception객체를 사용하여 예외의 원인을 알 수 있게 됨  Default는 “false”

contentType
<%@ page contentType =“text/html;charset=UTF-8” %>
Default : ISO-8859-1 알파벳 표현을 위한 8bit로 구성된 charset

